generator kysely {
    provider = "prisma-kysely"
    output   = "../src/db"
    fileName = "types.ts"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_MYSQL_URL")
}

//
//since im not actually using prisma client (only using schema to define tables) some stuff in schema.prisma may look okay but may not be
// one example is uuid() and cuid(), the main thing Im unsure about right now is indexing, do I have to do @@index in some places or is @id enough?
//before I know exactly what those cases are... best to examine schema of tables manually every now and then:
//
//> sudo docker ps
//> sudo docker exec -it SOME_CONTAINER_ID sh
//> mysql -u root -p
//<enter password>
//> use db;
//> DESCRIBE User;
//> SHOW INDEXES FROM User;
//
// also while there, can inspect performance of queries with EXPLAIN ANALYZE
//> EXPLAIN ANALYZE SELECT * FROM User WHERE googleUserSub = '117740985776559123826';
//
// that gives:
// "EXPLAIN": Index lookup on User using User_googleUserSub_idx (googleUserSub='117740985776559123826')
// "ANALYZE": (cost=0.35 rows=1) (actual time=0.055..0.058 rows=1 loops=1)
//
//for analyze the numbers means:
// Actual time to get first row (in milliseconds)
// Actual time to get all rows (in milliseconds) 
// Actual number of rows read <- THIS IS THE IMPORTANT ONE TO SEE IF INDEXING IS USED CORRECT
// Actual number of loops
//more explanation here: https://dev.mysql.com/blog-archive/mysql-explain-analyze/
//
// Also:
// prisma has some default mappings for String etc for different databases
// for example, with mysql, the type "String" maps to VARCHAR(191)
// see the other mappings here: https://www.prisma.io/docs/concepts/database-connectors/mysql#native-type-mapping-from-prisma-to-mysql
//
//
// EDIT: made a script to introspect/print tables and indexing, also 
// can explain analyze any queries on server by toggling environment variable

model User {
    id            Int     @id @default(autoincrement())
    email         String  @unique //allow multiple sign in methods, but same email would be same user.
    googleUserSub String? @unique
    discordUserId String? @unique
    githubUserId  Int?    @unique
    image         String?
    name          String

    createdEvents Event[]
    joinedEvents  UserEventPivot[]

    fcmTokens       FcmToken[]
    sentFollows     UserUserPivot[] @relation("sentFollows")
    recievedFollows UserUserPivot[] @relation("recievedFollows")

    notifications     UserNotificationPivot[]
    eventchatmessages Eventchatmessage[]

    errors Error[]
}

model UserUserPivot {
    user       User @relation("recievedFollows", fields: [userId], references: [id], onDelete: Cascade)
    userId     Int
    follower   User @relation("sentFollows", fields: [followerId], references: [id], onDelete: Cascade)
    followerId Int

    @@id([userId, followerId])
}

model UserNotificationPivot {
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         Int
    notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
    notificationId Int

    @@id([userId, notificationId])
}

model Notification {
    id                    Int                     @id @default(autoincrement())
    userNotificationPivot UserNotificationPivot[]

    title           String
    body            String
    imageUrl        String?
    linkUrl         String
    relativeLinkUrl String
}

model FcmToken {
    id        String   @id //the getToken() from firebase/messaging
    createdAt DateTime @default(now())
    User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    Int
}

model Example {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model UserEventPivot {
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   Int
    event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId  Int
    joinDate DateTime @default(now())

    @@id([userId, eventId])
}

model Eventchatmessage {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    text      String   @db.VarChar(280)

    event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId Int
    user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  Int
}

model Event {
    id        Int  @id @default(autoincrement())
    creator   User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId Int

    what             String
    where            String
    when             DateTime
    whenEnd          DateTime
    who              String
    info             String
    image            String?
    imageAspectRatio Float?

    joinedUsers      UserEventPivot[]
    eventchatmessage Eventchatmessage[]
    eventLocation    EventLocation?
}

model EventLocation {
    id        Int     @id @default(autoincrement())
    lng       Float
    lat       Float
    placeName String? //from google geocoding api (reverseGeocoding from lng lat)

    event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId Int   @unique

    tiles EventLocationTilePivot[]
}

model EventLocationTilePivot {
    eventLocation   EventLocation @relation(fields: [eventLocationId], references: [id], onDelete: Cascade)
    eventLocationId Int
    tile            Tile          @relation(fields: [tileId], references: [id], onDelete: Cascade)
    tileId          String
    //joinDate DateTime @default(now())

    @@id([eventLocationId, tileId])
}

model Tile {
    id String @id //"z-x-y" eg "5-10-11"

    eventLocations EventLocationTilePivot[]
}

model Error {
    id     Int   @id @default(autoincrement())
    user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int?

    name    String
    message String
}
