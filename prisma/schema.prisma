generator kysely {
    provider = "prisma-kysely"
    output   = "../src/db"
    fileName = "types.ts"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_MYSQL_URL")
}

//since im not actually using prisma client (only using schema to define tables) some stuff in schema.prisma may look okay but may not be
// one example is uuid() and cuid(), the main thing Im unsure about right now is indexing, do I have to do @@index in some places or is @id enough?
//before I know exactly what those cases are... best to examine schema of tables manually every now and then:
//
//> sudo docker ps
//> sudo docker exec -it SOME_CONTAINER_ID sh
//> mysql -u root -p
//<enter password>
//> use db;
//> DESCRIBE User;
//> SHOW INDEXES FROM User;

// also while there, can inspect performance of queries with EXPLAIN ANALYZE
//> EXPLAIN ANALYZE SELECT * FROM User WHERE googleUserSub = '117740985776559123826';
//
// that gives:
// "EXPLAIN": Index lookup on User using User_googleUserSub_idx (googleUserSub='117740985776559123826')
// "ANALYZE": (cost=0.35 rows=1) (actual time=0.055..0.058 rows=1 loops=1)

//for analyze the numbers means:
// Actual time to get first row (in milliseconds)
// Actual time to get all rows (in milliseconds) 
// Actual number of rows read <- THIS IS THE IMPORTANT ONE TO SEE IF INDEXING IS USED CORRECT
// Actual number of loops
//more explanation here: https://dev.mysql.com/blog-archive/mysql-explain-analyze/

model User {
    id            Int     @id @default(autoincrement())
    email         String  @unique //allow multiple sign in methods, but same email would be same user.
    googleUserSub String? @unique
    discordUserId String? @unique
    githubUserId  Int?    @unique
    image         String?
    name          String

    events       Event[]
    joinedEvents UserEventPivot[]
    fcmToken     String? // the getToken() from firebase/messaging
}

model Example {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model UserEventPivot {
    user     User     @relation(fields: [userId], references: [id])
    userId   Int
    event    Event    @relation(fields: [eventId], references: [id])
    eventId  Int
    joinDate DateTime @default(now())

    @@id([userId, eventId])
}

model Event {
    id        Int  @id @default(autoincrement())
    creator   User @relation(fields: [creatorId], references: [id])
    creatorId Int

    what    String
    where   String
    when    DateTime
    whenEnd DateTime
    who     String
    info    String

    place   Place? @relation(fields: [placeId], references: [id])
    placeId Int?

    joinedUsers UserEventPivot[]

    //@@fulltext([what])
}

model Place {
    id     Int     @id @default(autoincrement())
    label  String
    lng    Float
    lat    Float
    events Event[]
}
